{"version":3,"file":"main.1c9e75ea071724004166.js","mappings":";;;;AAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;ACjBe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBsB;AACU;AACN;;;;AAI1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC,4BAA4B,IAAI;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA,qCAAqC,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,yBAAyB;AACpE;AACA;AACA,+DAA+D,4BAA4B;AAC3F,oDAAoD,cAAc;;AAElE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,IAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,CAAC,E","sources":["webpack://todo-list/./src/project.js","webpack://todo-list/./src/todo.js","webpack://todo-list/./src/index.js"],"sourcesContent":["export default class Project {\n    constructor(name) {\n        this.name = name;\n        this.todos = [];\n    }\n\n    addTodo(todo) {\n        this.todos.push(todo);\n    }\n\n    removeTodo(todo) {\n        this.todos = this.todos.filter(t => t !== todo);\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n}","export default class Todo {\n    constructor(title, dueDate, priority, ) {\n        this.title = title;\n        this.dueDate = this.validateDate(dueDate);\n        this.priority = priority;\n        this.completed = false;\n    }\n\n    validateDate(date) {\n        const [year, month, day] = date.split('-').map(Number);\n        const parsedDate = new Date(year, month - 1, day);\n        if (isNaN(parsedDate)) {\n            throw new Error('Invalid date. Could not parse into a valid Date object.');\n        }\n        return parsedDate;\n    }\n}","import './styles.css';\nimport Project from './project';\nimport Todo from './todo';\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const newProjButton = document.querySelector('.newProj');\n    const projectsContainer = document.querySelector('.projects');\n    const todosContainer = document.querySelector('.todos');\n    const todoFormContainer = document.querySelector('.todo-form-container');\n    const todoForm = document.querySelector('.todo-form');\n    const todoTitleInput = document.querySelector('#todo-title');\n    const todoDateInput = document.querySelector('#todo-date');\n    const todoPrioritySelect = document.querySelector('#todo-priority');\n    const submitTodoButton = document.querySelector('#submit-todo');\n    const exitButton = document.querySelector('.exit-btn');\n    \n    let projects = loadProjectsFromLocalStorage() || [];\n\n    if (projects.length === 0) {\n        const defProj = new Project(\"Project\");\n        const defTodo = new Todo(\"ToDo\", \"9999-12-31\", 'Low');\n        defProj.addTodo(defTodo);\n        projects.push(defProj);\n    }\n\n    let selectedProjectIndex = null;\n    let editingTodo = null;\n    \n    function saveProjectsToLocalStorage() {\n        const serializedProjects = projects.map(project => ({\n            name: project.name,\n            todos: project.todos.map(todo => ({\n                title: todo.title,\n                dueDate: todo.dueDate.toISOString().split('T')[0],\n                priority: todo.priority,\n                completed: todo.completed,\n            }))\n        }));\n        localStorage.setItem('projects', JSON.stringify(serializedProjects));\n    }\n    \n    function loadProjectsFromLocalStorage() {\n        const savedProjects = localStorage.getItem('projects');\n        if (savedProjects) {\n            const parsedProjects = JSON.parse(savedProjects);\n            return parsedProjects.map(projectData => {\n                const project = new Project(projectData.name);\n                projectData.todos.forEach(todoData => {\n                    const todo = new Todo(\n                        todoData.title,\n                        todoData.dueDate,\n                        todoData.priority\n                    );\n                    todo.completed = todoData.completed;\n                    project.addTodo(todo);\n                });\n                return project;\n            });\n        }\n        return null;\n    }\n\n    function renderProjects() {\n        projectsContainer.innerHTML = '';\n        projects.forEach((project,index) => {\n            \n            const projectBox = document.createElement('li');\n            projectBox.className = 'project';\n            projectBox.textContent = project.name;\n            if (index === selectedProjectIndex) {\n                projectBox.classList.add('selected');\n            }\n    \n            projectBox.addEventListener('click', () => {\n                selectedProjectIndex = index;\n                displayTodos(index);\n                renderProjects();\n            });\n            \n            const editButton = document.createElement('i');\n            editButton.className = 'fas fa-edit edit-icon';\n            editButton.addEventListener('click', () => {\n                const newName = prompt('Enter new project name:', project.name);\n            \n                if (newName) {\n                    project.setName(newName);\n                    saveProjectsToLocalStorage();\n                    renderProjects();\n                }\n            });\n\n            const deleteButton = document.createElement('i');\n            deleteButton.className = 'fas fa-trash delete-icon';\n            deleteButton.addEventListener('click', (e) => {\n                e.stopPropagation();\n                if (selectedProjectIndex === index) {\n                    selectedProjectIndex = null;\n                    todosContainer.innerHTML = '';\n                } else if (selectedProjectIndex > index) {\n                    selectedProjectIndex -= 1;\n                }\n                projects.splice(index, 1);\n                saveProjectsToLocalStorage();\n                renderProjects();\n            });\n    \n            projectBox.appendChild(editButton);\n            projectBox.appendChild(deleteButton);\n            projectsContainer.appendChild(projectBox);\n        })\n    }\n\n    function addNewProject() {\n        const projectName = prompt(\"Enter a new project name:\");\n        if (projectName) {\n            const newProject = new Project(projectName);\n            projects.push(newProject);\n            saveProjectsToLocalStorage()\n            renderProjects();\n        }\n    }\n    newProjButton.addEventListener('click', addNewProject);\n\n    function displayTodos(projectIndex) {\n        todosContainer.innerHTML = '';\n        const selectedProject = projects[projectIndex];\n        \n        const projectHeading = document.createElement('h1');\n        projectHeading.textContent = selectedProject.name;\n        todosContainer.appendChild(projectHeading);\n\n        const todoList = document.createElement('ul');\n        todoList.className = 'todo-list';\n\n        selectedProject.todos.forEach(todo => {\n            const todoItem = document.createElement('li');\n            todoItem.className = 'todo';\n            const checkbox = document.createElement('input');\n            checkbox.type = 'checkbox';\n            checkbox.className = 'todo-checkbox';\n            checkbox.checked = todo.completed;\n            todoItem.classList.toggle('completed', todo.completed);\n\n            checkbox.addEventListener('change', () => {\n                todo.completed = checkbox.checked;\n                todoItem.classList.toggle('completed', todo.completed);\n                saveProjectsToLocalStorage();\n            });\n\n            const todoTitle = document.createElement('span');\n            todoTitle.className = 'todo-title';\n            todoTitle.textContent = todo.title;\n    \n            const todoDate = document.createElement('span');\n            todoDate.className = 'todo-date';\n            todoDate.textContent = `Due: ${formatDate(todo.dueDate)}`;\n    \n            const todoPriority = document.createElement('span');\n            todoPriority.className = `todo-priority priority-${todo.priority.toLowerCase()}`;\n            todoPriority.textContent = `Priority: ${todo.priority}`;\n\n            const editButton = document.createElement('i');\n            editButton.className = 'fas fa-edit edit-icon';\n            editButton.addEventListener('click', () => {\n                todoTitleInput.value = todo.title;\n                todoDateInput.value = todo.dueDate.toISOString().split('T')[0];\n                todoPrioritySelect.value = todo.priority;\n\n                todoFormContainer.classList.add('visible');\n                editingTodo = todo;\n\n                submitTodoButton.removeEventListener('click', addNewTodo);\n                submitTodoButton.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const title = todoTitleInput.value;\n                    const dueDate = todoDateInput.value;\n                    const priority = todoPrioritySelect.value;\n                    if (title && dueDate && priority && selectedProjectIndex !== null) {\n                        editTodo(todo, title, dueDate, priority);\n                    }\n                });\n            });\n\n            const deleteButton = document.createElement('i');\n            deleteButton.className = 'fas fa-trash delete-icon';\n            deleteButton.addEventListener('click', (e) => {\n                e.stopPropagation();\n                selectedProject.removeTodo(todo);\n                saveProjectsToLocalStorage();\n                displayTodos(selectedProjectIndex);\n            });\n        \n            todoItem.appendChild(checkbox);\n            todoItem.appendChild(todoTitle);\n            todoItem.appendChild(todoDate);\n            todoItem.appendChild(todoPriority);\n            todoItem.appendChild(editButton);\n            todoItem.appendChild(deleteButton);\n            todosContainer.appendChild(todoItem);\n        });\n\n        const todoButton = document.createElement('button');\n        todoButton.className = 'newTodo';\n        todoButton.textContent = '+ New ToDo';\n        todoButton.addEventListener('click', () => {\n            todoFormContainer.classList.add('visible');\n        });\n        todosContainer.appendChild(todoButton);\n    }\n\n    function formatDate(date) {\n        return date.toLocaleString('en-US', {\n            weekday: 'long',\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n        });\n    }\n\n    function addNewTodo() {\n        const title = todoTitleInput.value;\n        const dueDate = todoDateInput.value;\n        const priority = todoPrioritySelect.value;\n\n        if (title && dueDate && priority && selectedProjectIndex !== null) {\n            const newTodo = new Todo(\n                title,\n                dueDate,\n                priority\n            );\n            projects[selectedProjectIndex].addTodo(newTodo);\n            saveProjectsToLocalStorage();\n            displayTodos(selectedProjectIndex);\n            todoForm.reset();\n            todoFormContainer.classList.remove('visible');\n        }\n    }\n\n    function editTodo(todo, title, dueDate, priority) {\n        if (title && dueDate && priority) {\n            \n            todo.title = title;\n            todo.dueDate = todo.validateDate(dueDate);\n            todo.priority = priority;\n            saveProjectsToLocalStorage();\n\n            displayTodos(selectedProjectIndex);\n            \n            todoForm.reset();\n            todoFormContainer.classList.remove('visible');\n            editingTodo = null; \n        }\n    }\n\n    function handleEditOrAddTodo(e) {\n        e.preventDefault();\n        if (editingTodo) {\n            editTodo(editingTodo, todoTitleInput.value, todoDateInput.value, todoPrioritySelect.value);\n        } else {\n            addNewTodo();\n        }\n    }\n\n    submitTodoButton.addEventListener('click', handleEditOrAddTodo);\n\n    exitButton.addEventListener('click', () => {\n        todoFormContainer.classList.remove('visible');\n        editingTodo = null;\n        todoForm.reset();\n    });\n\n    renderProjects();\n});"],"names":[],"sourceRoot":""}